import React from 'react';
import * as XLSX from 'xlsx';
import { MenuItem } from '@chakra-ui/react';

// Utility functions
const formatDate = (dateString) => {
  const date = new Date(dateString);
  const [day, month, year, hours, minutes, seconds] = [
    date.getDate().toString().padStart(2, '0'),
    (date.getMonth() + 1).toString().padStart(2, '0'),
    date.getFullYear(),
    date.getHours().toString().padStart(2, '0'),
    date.getMinutes().toString().padStart(2, '0'),
    date.getSeconds().toString().padStart(2, '0'),
  ];
  return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
};

const MAX_TEXT_LENGTH = 32767;
const truncateText = (text) => (text && text.length > MAX_TEXT_LENGTH ? text.substring(0, MAX_TEXT_LENGTH) : text || '');

const calculateStatusStats = (data) => {
  const counts = { Present: 0, Absent: 0, Excused: 0 };
  data.forEach(({ status }) => counts[status] !== undefined && counts[status]++);
  
  const total = data.length;
  const percentages = Object.fromEntries(
    Object.entries(counts).map(([status, count]) => [status, ((count / total) * 100).toFixed(2)])
  );

  return { counts, percentages, total };
};

const exportToExcel = (data, fileName, lecturerInfo, report) => {
  const studentHeader = ['Student ID', 'Student Name', 'Subject Section', 'Status', 'Date and Time'];
  const transformedData = data.map(({ student_id, student_name, subject_section, status, date }) => [
    truncateText(student_id?.toString() || ''),
    truncateText(student_name),
    truncateText(subject_section?.toString() || ''),
    truncateText(status),
    formatDate(date),
  ]);

  const workbook = XLSX.utils.book_new();
  const lecturerNames = lecturerInfo.map(({ name }) => name || 'N/A').join(', ');
  const sectionNames = lecturerInfo.map(({ subject_section }) => subject_section || 'N/A').join(', ');

  const worksheetData = report
    ? [['Subject Code', 'Subject Name', ...studentHeader], ...transformedData.map(item => [truncateText(item.subject_code), truncateText(item.subject_name), ...item])]
    : [['Lecturer:', lecturerNames], ['Section:', sectionNames], [], studentHeader, ...transformedData];

  const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);
  worksheet['!cols'] = studentHeader.map((_, i) => ({ wch: Math.max(...transformedData.map(row => row[i].length), studentHeader[i].length) + 2 }));

  const stats = calculateStatusStats(data);
  XLSX.utils.sheet_add_aoa(worksheet, [
    ['Total Count', stats.total],
    ...Object.entries(stats.counts).map(([status, count]) => [status + ' Count', count]),
    ...Object.entries(stats.percentages).map(([status, percentage]) => [status + ' (%)', percentage]),
  ], { origin: transformedData.length + 5 });

  XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');
  XLSX.writeFile(workbook, fileName);
};

const Excel = ({ data, lecturerInfo, subject_name, report }) => (
  <MenuItem onClick={() => exportToExcel(data, `${subject_name}.xlsx`, lecturerInfo, report)}>Export to Excel</MenuItem>
);

export default Excel;
