const handleAutoAddAttendance = (database) => async (req, res) => {
    const today = new Date();

    try {
        // Fetch sections for today's date
        const sections = await database('sections')
            .select('subject_id', 'section_number', 'end_time');

        for (const section of sections) {
            const { subject_id, section_number, end_time } = section;

            const endTime = new Date(`${today.toISOString().split('T')[0]}T${end_time}`);

            if (today >  endTime) {
                await markStudentsAbsent(database, subject_id, section_number, today); 
            }
        }

        res.status(200).json({ message: 'Attendance auto-update completed successfully.' });
    } catch (error) {
        console.error('Error in auto-adding attendance:', error);
        res.status(500).json({ error: 'Failed to auto-add attendance.' });
    }
};

const markStudentsAbsent = async (database, subject_id, section_number, today) => {
    try {
        const studentsInSection = await database('students')
            .leftJoin('student_subjects', function() {
                this.on('students.id', '=', 'student_subjects.student_id')
                    .andOn('student_subjects.subject_section', '=', section_number)
                    .andOn('student_subjects.subject_id', '=', subject_id)
                    .andOn('students.current_year', '=', 'student_subjects.year') 
                    .andOn('students.current_semester', '=', 'student_subjects.semester'); 
            })
            .whereNotNull('student_subjects.subject_section')
            .select('students.id'); 

        const startOfDay = new Date(today);
        startOfDay.setHours(0, 0, 0, 0);
        const endOfDay = new Date(startOfDay);
        endOfDay.setDate(endOfDay.getDate() + 1);

        // Check if the attendance record already exists for each student before inserting
        for (const student of studentsInSection) {
            const existingRecord = await database('attendances')
                .where('student_id', student.id)
                .andWhere('subject_id', subject_id)
                .andWhere('date', '>=', startOfDay)
                .andWhere('date', '<', endOfDay)
                .first();

            if (!existingRecord) {
                // Insert attendance record if it doesn't exist
                await database('attendances')
                    .insert({
                        student_id: student.id,
                        subject_id: subject_id,
                        status: 'Absent',
                        date: startOfDay 
                    });
            }
        }
    } catch (error) {
        console.error('Error marking students as absent:', error);
    }
};


module.exports = { handleAutoAddAttendance };
